{"version":3,"sources":["components/Page.js","components/MapMarker.js","App.js","serviceWorker.js","index.js"],"names":["parse","require","Page","page","useState","show","setShow","divButShow","setDivButShow","a","htmlToDOM","description","body","b","domToReact","className","onClick","name","fi","en","where_when_duration","where_and_when","duration","href","info_url","Mark","props","d","data","key","id","onRightClick","title","setC","position","lat","location","lng","lon","zoom","onCloseClick","onLoad","console","log","config","App","center","setCenter","api_key","process","KEY","siteData","setData","topButton","topButtonText","useEffect","document","getElementById","window","onscroll","scrollTop","documentElement","style","display","get_api_data","axios","get","then","onMouseOver","borderRight","borderBottom","color","opacity","onMouseLeave","googleMapsApiKey","mapContainerStyle","height","width","map","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77ee3e5a.chunk.js","sourcesContent":["\r\nimport React, { useState,  } from 'react';\r\nconst parse = require('html-react-parser');\r\n\r\nconst Page = (page) => {\r\n\r\n\r\n    \r\n    const [show, setShow] = useState(false)\r\n    const [divButShow, setDivButShow] = useState(false)\r\n\r\n    \r\n    \r\n    const a = parse.htmlToDOM(page.page.description.body)    \r\n    const b = parse.domToReact(a)\r\n\r\n    \r\n    if(!show){\r\n\r\n        return(\r\n        \r\n            <button className='button' onClick = {() => setShow(show === false ? true : false)}>+ {page.page.name.fi} </button>\r\n            \r\n            \r\n    )\r\n\r\n    }\r\n    else{\r\n\r\n\r\n\r\n        return(\r\n        <div >\r\n            <button className='button' onClick = {() => setShow(show === false ? true : false)}>- {page.page.name.fi} </button>\r\n            \r\n            <div className=\"body\">\r\n                <p >\r\n                    {page.page.name.en}\r\n                </p>\r\n                <p >\r\n                    Miss√§ ja milloin? : {page.page.where_when_duration.where_and_when ? page.page.where_when_duration.where_and_when : \"Ei tietoa\"} \r\n                </p>\r\n                <p >\r\n                    Kesto: {page.page.where_when_duration.duration ? page.page.where_when_duration.duration : \"Ei tietoa\"} \r\n                </p>\r\n            \r\n                <p >\r\n                    Sivut : \r\n                <a href={page.page.info_url}>{page.page.info_url}</a>\r\n                    \r\n                </p>\r\n\r\n            <button className=\"button\"  onClick = {() => setDivButShow(divButShow === false ? true : false)}>\r\n\r\n                {divButShow ? \"- Less Info\" : \"+ More Info\"}\r\n            </button>\r\n                \r\n                {divButShow ? b : null}\r\n\r\n            </div>\r\n\r\n           \r\n                \r\n        </div>\r\n\r\n\r\n\r\n        )\r\n        \r\n        \r\n    }\r\n    \r\n}\r\n\r\nexport default Page","import { Marker, InfoWindow } from '@react-google-maps/api'\r\nimport React, {  useState,  } from 'react';\r\n\r\n\r\n\r\nconst Mark = (props) => {\r\n    \r\n    const [show, setShow] = useState(null)\r\n    const d = props.data\r\n    \r\n\r\n    const InfoWin = () => {\r\n        return(\r\n            \r\n            <InfoWindow key={d.id} onCloseClick = {() => setShow(null)} onLoad={() => console.log('LOL')} position = {{lat: d.location.lat, lng: d.location.lon}}>\r\n            <div>\r\n                {d.name.fi + '\\n'}\r\n                <a  href={d.info_url}>{d.info_url}</a>\r\n            </div>\r\n          </InfoWindow>\r\n        \r\n        )\r\n    }\r\n    if (show === null){\r\n\r\n    return(\r\n        \r\n        <Marker key={d.id} onRightClick={() => setShow(1)} title={d.name.fi + ' (right click for more info)'}  onClick={props.setC} position= {{lat: d.location.lat, lng: d.location.lon}} zoom={9}>\r\n            \r\n\r\n\r\n            </Marker>\r\n    )\r\n    }\r\n    else{\r\n\r\n        return(\r\n        <div>\r\n            <Marker key={d.id} title={d.name.fi + '(right click for more info)'}  onClick={props.setC}  position= {{lat: d.location.lat, lng: d.location.lon}} zoom={9}>\r\n                \r\n                </Marker>\r\n                \r\n                <InfoWin></InfoWin>\r\n                </div>\r\n        )\r\n        }\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n}\r\n\r\nexport default Mark","import React, { useEffect, useState,  } from 'react';\nimport Page from './components/Page'\nimport './App.css';\nimport axios from 'axios';\nimport { GoogleMap, LoadScript} from '@react-google-maps/api'\nimport Mark from './components/MapMarker'\nrequire('dotenv').config()\n\nconst App =() => {\n\n  const [center, setCenter] = useState({\n    lat: 60.192059,\n    lng: 24.945831\n  })\n  \n  const api_key = process.env.KEY\n  const [siteData, setData] = useState(null)\n\n  var topButton = null\n  var topButtonText = null\n  useEffect(() => {\n    topButton = document.getElementById(\"toTop\")\n    topButtonText = document.getElementById(\"topButText\")\n    \n  })\n\n\n  const scrollToPageTop = () => {\n    \n    document.body.scrollTop = 550\n    document.documentElement.scrollTop = 550\n    \n  }\n\n  \n\n  const showScrollButton = () => {\n    if (topButton) {\n\n      if (document.body.scrollTop > 1000 || document.documentElement.scrollTop > 1000){\n        topButton.style.display = \"inline-block\"\n        topButtonText.style.display = \"block\"\n      }\n      else\n      {   \n        topButton.style.display = \"none\"\n        topButtonText.style.display = \"none\"\n      }\n    }\n\n\n  }\n\n  const highlightTopScroller = () => {\n    \n    if (topButton && topButtonText){\n      topButton.style.borderRight =  \"5px solid white\"\n      topButton.style.borderBottom =  \"5px solid white\"\n      topButtonText.style.color = \"white\"\n      topButton.style.opacity = 1\n      topButtonText.style.opacity = 1\n\n    }\n\n\n  }\n\n  const unHighlightScroller = () => {\n\n    topButton.style.opacity = 0.8\n    topButtonText.style.opacity = 0.8\n\n  }\n\n\n  window.onscroll = showScrollButton\n\n  \n\n  const get_api_data =async () => {\n    const a = await axios.get('https://tranquil-brushlands-44401.herokuapp.com/events')\n    \n    return a.data\n\n  }\n\n\n\n  useEffect(() => {\n    get_api_data()\n    .then(d => setData(d.data))\n\n  }, [])\n  \n\n  \n\n  if (siteData === null){\n \n    return (\n\n    <div className=\"loader\">\n      Loading..\n\n\n    </div>\n  )\n  }\n  else{\n\n    return(\n      <div className='sub-bod'>\n\n        <p className=\"topButText\" id=\"topButText\">\n          Scroll to top\n        </p>\n\n        <button \n        id=\"toTop\" className=\"topButton\" \n        onClick = {() => scrollToPageTop()}  \n        onMouseOver = {() => highlightTopScroller()} \n        onMouseLeave = {() => unHighlightScroller()} >\n        </button>\n\n\n        <h1 className='App-header'>\n          Tapahtumat Helsingiss√§\n        </h1>\n        \n        <LoadScript id=\"script-loader\" googleMapsApiKey={api_key}>\n        \n        <GoogleMap\n        id=\"circle-example\"\n        mapContainerStyle={{\n          height : 400,\n          width : window.width,\n          position:'relative',\n        }}\n        zoom={9}\n        center={center}>\n\n        {siteData.map(d => \n          \n            <Mark key={d.id} setC = {() => setCenter({lat: d.location.lat, lng: d.location.lon})} data = {d}></Mark>\n        )}\n        </GoogleMap>        \n      </LoadScript>\n        \n        {\n        siteData.map(d => \n        <Page key={d.id} page={d}/>)}\n\n      </div>\n    )\n  }\n  \n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}