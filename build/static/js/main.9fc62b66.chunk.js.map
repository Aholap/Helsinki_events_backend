{"version":3,"sources":["components/Page.js","components/MapMarker.js","App.js","serviceWorker.js","index.js"],"names":["Page","page","useState","show","setShow","console","log","className","onClick","name","fi","en","where_when_duration","where_and_when","duration","href","info_url","Mark","props","d","data","key","id","onRightClick","title","setC","position","lat","location","lng","lon","zoom","onCloseClick","onLoad","require","config","App","center","setCenter","api_key","process","KEY","siteData","setData","get_api_data","a","axios","get","useEffect","then","googleMapsApiKey","mapContainerStyle","height","width","map","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fc62b66.chunk.js","sourcesContent":["import React, { useState,  } from 'react';\r\n\r\n\r\n\r\n\r\nconst Page = (page) => {\r\n\r\n    const [show, setShow] = useState(false)\r\n\r\n\r\n    console.log('PAGE', page)\r\n\r\n    if(!show){\r\n\r\n        return(\r\n        \r\n            <button className='button' onClick = {() => setShow(show === false ? true : false)}>+ {page.page.name.fi} </button>\r\n            \r\n        \r\n\r\n    )\r\n\r\n    }\r\n    else{\r\n        return(\r\n        <div >\r\n            <button className='button' onClick = {() => setShow(show === false ? true : false)}>- {page.page.name.fi} </button>\r\n                <p className='body'>\r\n                    {page.page.name.en}\r\n                </p>\r\n                <p className='body'>\r\n                    Missä ja milloin? : {page.page.where_when_duration.where_and_when} \r\n                </p>\r\n                <p className='body'>\r\n                    Kesto: {page.page.where_when_duration.duration ? page.page.where_when_duration.duration : \"Ei tietoa\"} \r\n                </p>\r\n            \r\n                <p className='body'>\r\n                    Sivut : \r\n                <a href={page.page.info_url}>{page.page.info_url}</a>\r\n                    \r\n                </p>\r\n        </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Page","import { Marker, InfoWindow } from '@react-google-maps/api'\r\nimport React, {  useState,  } from 'react';\r\n\r\n\r\n\r\nconst Mark = (props) => {\r\n    \r\n    const [show, setShow] = useState(null)\r\n    const d = props.data\r\n    \r\n    console.log(show === null)\r\n    const InfoWin = () => {\r\n        return(\r\n            \r\n            <InfoWindow key={d.id} onCloseClick = {() => setShow(null)} onLoad={() => console.log('LOL')} position = {{lat: d.location.lat, lng: d.location.lon}}>\r\n            <div>\r\n                {d.name.fi + '\\n'}\r\n                <a  href={d.info_url}>{d.info_url}</a>\r\n            </div>\r\n          </InfoWindow>\r\n        \r\n        )\r\n    }\r\n    if (show === null){\r\n\r\n    return(\r\n        \r\n        <Marker key={d.id} onRightClick={() => setShow(1)} title={d.name.fi + ' (right click for more info)'}  onClick={props.setC} position= {{lat: d.location.lat, lng: d.location.lon}} zoom={9}>\r\n            \r\n\r\n\r\n            </Marker>\r\n    )\r\n    }\r\n    else{\r\n\r\n        return(\r\n        <div>\r\n            <Marker key={d.id} title={d.name.fi + '(right click for more info)'}  onClick={props.setC}  position= {{lat: d.location.lat, lng: d.location.lon}} zoom={9}>\r\n                \r\n                </Marker>\r\n                \r\n                <InfoWin></InfoWin>\r\n                </div>\r\n        )\r\n        }\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n}\r\n\r\nexport default Mark","import React, { useEffect, useState,  } from 'react';\nimport Page from './components/Page'\nimport './App.css';\nimport axios from 'axios';\nimport { GoogleMap, LoadScript} from '@react-google-maps/api'\nimport Mark from './components/MapMarker'\nrequire('dotenv').config()\n\nconst App =() => {\n  const [center, setCenter] = useState({\n    lat: 60.192059,\n    lng: 24.945831\n  })\n\n  \n\n  \n  const api_key = process.env.KEY\n  const [siteData, setData] = useState(null)\n  \n\n  const get_api_data =async () => {\n    const a = await axios.get('https://tranquil-brushlands-44401.herokuapp.com/events')\n    console.log(a)\n    return a.data\n\n  }\n\n\n\n  useEffect(() => {\n\n    \n    get_api_data()\n    .then(d => setData(d.data))\n    \n    \n\n  }, [])\n  \n\n  \n\n  if (siteData === null){\n    console.log(typeof(siteData))\n    console.log(siteData == null)\n    return (\n\n    <div className=\"loading_thing\">\n      Loading..\n\n\n    </div>\n  )\n  }\n  else{\n    console.log(siteData)\n    return(\n      <div className='sub-bod'>\n        <h1 className='App-header'>\n        Tapahtumat Helsingissä\n        </h1>\n\n      \n        <LoadScript\n        \n        id=\"script-loader\"\n        googleMapsApiKey={api_key}\n        \n      >\n        <GoogleMap\n        \n        id=\"circle-example\"\n        mapContainerStyle={{\n          height: \"400px\",\n          width: \"800px\"\n        }}\n        zoom={9}\n        center={center}>\n\n\n        {siteData.map(d => \n          //Marker component!!!!!!!!!!!!!\n            <Mark key={d.id} setC = {() => setCenter({lat: d.location.lat, lng: d.location.lon})} data = {d}></Mark>\n        )}\n\n\n          \n          \n\n          \n        \n        \n        </GoogleMap>\n        \n      </LoadScript>\n\n        \n        {\n        siteData.map(d => \n        <Page key={d.id} page={d}/>)}\n     \n\n\n\n      </div>\n    )\n  }\n  \n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}